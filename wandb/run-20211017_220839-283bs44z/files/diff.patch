diff --git a/.ipynb_checkpoints/00-checkpoint.ipynb b/.ipynb_checkpoints/00-checkpoint.ipynb
index d734806..d17341f 100644
--- a/.ipynb_checkpoints/00-checkpoint.ipynb
+++ b/.ipynb_checkpoints/00-checkpoint.ipynb
@@ -22,7 +22,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 5,
    "id": "0939dc4b-e884-4ab0-804a-f5648f9339e8",
    "metadata": {},
    "outputs": [],
@@ -37,13 +37,13 @@
     "        labels[label] = idx\n",
     "        labels_r[idx] = label\n",
     "    for folder in os.listdir('./data/'):\n",
-    "        for file in os.listdir(f'./data/{folder}/'):\n",
+    "        for file in os.listdir(f'./data/{folder}/')[:1000]:\n",
     "            img = cv2.imread(f'./data/{folder}/{file}')\n",
     "            img = cv2.resize(img,(56,56))\n",
     "            img = img / 255.0\n",
     "            data.append([\n",
     "                img,\n",
-    "                np.eye(labels[foder],len(labels))[labels[folder]-1]\n",
+    "                np.eye(labels[folder],len(labels))[labels[folder]-1]\n",
     "            ])\n",
     "    X = []\n",
     "    y = []\n",
@@ -60,17 +60,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 6,
    "id": "e6b0bf20-bfe6-4c31-a483-d22ba41db647",
    "metadata": {},
    "outputs": [],
    "source": [
-    "X,y,X_train,X_test,y_train,y_test,labels,labels_r,idx,data = load_data()"
+    "X,y,X_train,X_test,y_train,y_test,labels,labels_r,idx,data = load_data()\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 7,
    "id": "e7aeebd0-2b1d-49d3-b99d-75a5d0eff7ca",
    "metadata": {},
    "outputs": [],
@@ -91,7 +91,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 8,
    "id": "7374de2b-b5cd-4eb7-9c5d-d7bd3e7dc5ec",
    "metadata": {},
    "outputs": [],
@@ -104,7 +104,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 9,
    "id": "f5fa0939-9766-4738-8188-16e46286f304",
    "metadata": {},
    "outputs": [],
@@ -125,10 +125,162 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 14,
    "id": "c640a143-7ef0-48b6-bb14-f0a7a4bef6e8",
    "metadata": {},
    "outputs": [],
+   "source": [
+    "model = resnet18().to(device)\n",
+    "model.fc = Linear(512,len(labels))\n",
+    "criterion = MSELoss()\n",
+    "optimizer = torch.optim.Adam(model.parameters(),lr=0.001)\n",
+    "epochs = 100\n",
+    "batch_size = 32"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "d54f5185-620c-4be7-b245-7e335c242176",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "Finishing last run (ID:2r7peb10) before initializing another..."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<br/>Waiting for W&B process to finish, PID 415013<br/>Program ended successfully."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "wandb.init(project=PROJECT_NAME,name='baseline-TL')\n",
+    "for _ in tqdm(range(epochs)):\n",
+    "    for i in range(0,len(X_train),batch_size):\n",
+    "        X_batch = X_train[i:i+batch_size]\n",
+    "        y_batch = y_train[i:i+batch_size]\n",
+    "        model.to(device)\n",
+    "        preds = model(X_batch)\n",
+    "        loss = criterion(preds,y_batch)\n",
+    "        optimizer.zero_grad()\n",
+    "        loss.backward()\n",
+    "        optimizer.step()\n",
+    "    model.eval()\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Loss':(get_loss(model,X_train,y_train,criterion)+get_loss(model,X_batch,y_batch,criterion))/2})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Val Loss':get_loss(model,X_test,y_test,criterion)})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Acc':(get_accuracy(model,X_train,y_train)+get_accuracy(model,X_batch,y_batch))/2})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Val ACC':get_accuracy(model,X_test,y_test)})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    model.train()\n",
+    "wandb.finish()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "73aad666-eabd-4f60-882a-fa9dad86cac8",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "class Model(Module):\n",
+    "    def __init__(self):\n",
+    "        super().__init__()\n",
+    "        self.max_pool2d = MaxPool2d((2,2),(2,2))\n",
+    "        self.activation = ReLU()\n",
+    "        self.conv1 = Conv2d(3,7,(5,5))\n",
+    "        self.conv2 = Conv2d(7,14,(5,5))\n",
+    "        self.conv2bn = BatchNorm2d(14)\n",
+    "        self.conv3 = Conv2d(14,21,(5,5))\n",
+    "        self.linear1 = Linear(21*5*5,256)\n",
+    "        self.linear2 = Linear(256,512)\n",
+    "        self.linear2bn = BatchNorm1d(512)\n",
+    "        self.linear3 = Linear(512,256)\n",
+    "        self.output = Linear(256,len(labels))\n",
+    "        \n",
+    "    def forward(self,X):\n",
+    "        preds = self.max_pool2d(self.activation(self.conv1(X)))\n",
+    "        preds = self.max_pool2d(self.activation(self.conv2bn(self.conv2(preds))))\n",
+    "        preds = self.max_pool2d(self.activation(self.conv3(preds)))\n",
+    "        preds = preds.view(-1,21*5*5)\n",
+    "        preds = self.activation(self.linear1(preds))\n",
+    "        preds = self.activation(self.linear2bn(self.linear2(preds)))\n",
+    "        preds = self.activation(self.linear3(preds))\n",
+    "        preds = self.output(preds)\n",
+    "        return preds"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "796ef632-071c-48be-b83a-6aefb302ea0f",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "model = Model().to(device)\n",
+    "criterion = MSELoss()\n",
+    "optimizer = Adam(model.parameters(),lr=0.001)\n",
+    "epochs = 100\n",
+    "bathc_size = 32"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "0ae17d2a-b04e-449b-baa4-c2119e45952a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "wandb.init(project=PROJECT_NAME,name='baseline-CNN')\n",
+    "for _ in tqdm(range(epochs)):\n",
+    "    for i in range(0,len(X_train),batch_size):\n",
+    "        X_batch = X_train[i:i+batch_size]\n",
+    "        y_batch = y_train[i:i+batch_size]\n",
+    "        model.to(device)\n",
+    "        preds = model(X_batch)\n",
+    "        loss = criterion(preds,y_batch)\n",
+    "        optimizer.zero_grad()\n",
+    "        loss.backward()\n",
+    "        optimizer.step()\n",
+    "    model.eval()\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Loss':(get_loss(model,X_train,y_train,criterion)+get_loss(model,X_batch,y_batch,criterion))/2})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Val Loss':get_loss(model,X_test,y_test,criterion)})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Acc':(get_accuracy(model,X_train,y_train)+get_accuracy(model,X_batch,y_batch))/2})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Val ACC':get_accuracy(model,X_test,y_test)})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    model.train()\n",
+    "wandb.finish()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "3706d46d-4ef8-4000-823e-05ce8220689f",
+   "metadata": {},
+   "outputs": [],
    "source": []
   }
  ],
diff --git a/00.ipynb b/00.ipynb
index d734806..d17341f 100644
--- a/00.ipynb
+++ b/00.ipynb
@@ -22,7 +22,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 5,
    "id": "0939dc4b-e884-4ab0-804a-f5648f9339e8",
    "metadata": {},
    "outputs": [],
@@ -37,13 +37,13 @@
     "        labels[label] = idx\n",
     "        labels_r[idx] = label\n",
     "    for folder in os.listdir('./data/'):\n",
-    "        for file in os.listdir(f'./data/{folder}/'):\n",
+    "        for file in os.listdir(f'./data/{folder}/')[:1000]:\n",
     "            img = cv2.imread(f'./data/{folder}/{file}')\n",
     "            img = cv2.resize(img,(56,56))\n",
     "            img = img / 255.0\n",
     "            data.append([\n",
     "                img,\n",
-    "                np.eye(labels[foder],len(labels))[labels[folder]-1]\n",
+    "                np.eye(labels[folder],len(labels))[labels[folder]-1]\n",
     "            ])\n",
     "    X = []\n",
     "    y = []\n",
@@ -60,17 +60,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 6,
    "id": "e6b0bf20-bfe6-4c31-a483-d22ba41db647",
    "metadata": {},
    "outputs": [],
    "source": [
-    "X,y,X_train,X_test,y_train,y_test,labels,labels_r,idx,data = load_data()"
+    "X,y,X_train,X_test,y_train,y_test,labels,labels_r,idx,data = load_data()\n"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 7,
    "id": "e7aeebd0-2b1d-49d3-b99d-75a5d0eff7ca",
    "metadata": {},
    "outputs": [],
@@ -91,7 +91,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 8,
    "id": "7374de2b-b5cd-4eb7-9c5d-d7bd3e7dc5ec",
    "metadata": {},
    "outputs": [],
@@ -104,7 +104,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 9,
    "id": "f5fa0939-9766-4738-8188-16e46286f304",
    "metadata": {},
    "outputs": [],
@@ -125,10 +125,162 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 14,
    "id": "c640a143-7ef0-48b6-bb14-f0a7a4bef6e8",
    "metadata": {},
    "outputs": [],
+   "source": [
+    "model = resnet18().to(device)\n",
+    "model.fc = Linear(512,len(labels))\n",
+    "criterion = MSELoss()\n",
+    "optimizer = torch.optim.Adam(model.parameters(),lr=0.001)\n",
+    "epochs = 100\n",
+    "batch_size = 32"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "d54f5185-620c-4be7-b245-7e335c242176",
+   "metadata": {},
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "Finishing last run (ID:2r7peb10) before initializing another..."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<br/>Waiting for W&B process to finish, PID 415013<br/>Program ended successfully."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "wandb.init(project=PROJECT_NAME,name='baseline-TL')\n",
+    "for _ in tqdm(range(epochs)):\n",
+    "    for i in range(0,len(X_train),batch_size):\n",
+    "        X_batch = X_train[i:i+batch_size]\n",
+    "        y_batch = y_train[i:i+batch_size]\n",
+    "        model.to(device)\n",
+    "        preds = model(X_batch)\n",
+    "        loss = criterion(preds,y_batch)\n",
+    "        optimizer.zero_grad()\n",
+    "        loss.backward()\n",
+    "        optimizer.step()\n",
+    "    model.eval()\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Loss':(get_loss(model,X_train,y_train,criterion)+get_loss(model,X_batch,y_batch,criterion))/2})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Val Loss':get_loss(model,X_test,y_test,criterion)})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Acc':(get_accuracy(model,X_train,y_train)+get_accuracy(model,X_batch,y_batch))/2})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Val ACC':get_accuracy(model,X_test,y_test)})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    model.train()\n",
+    "wandb.finish()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "73aad666-eabd-4f60-882a-fa9dad86cac8",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "class Model(Module):\n",
+    "    def __init__(self):\n",
+    "        super().__init__()\n",
+    "        self.max_pool2d = MaxPool2d((2,2),(2,2))\n",
+    "        self.activation = ReLU()\n",
+    "        self.conv1 = Conv2d(3,7,(5,5))\n",
+    "        self.conv2 = Conv2d(7,14,(5,5))\n",
+    "        self.conv2bn = BatchNorm2d(14)\n",
+    "        self.conv3 = Conv2d(14,21,(5,5))\n",
+    "        self.linear1 = Linear(21*5*5,256)\n",
+    "        self.linear2 = Linear(256,512)\n",
+    "        self.linear2bn = BatchNorm1d(512)\n",
+    "        self.linear3 = Linear(512,256)\n",
+    "        self.output = Linear(256,len(labels))\n",
+    "        \n",
+    "    def forward(self,X):\n",
+    "        preds = self.max_pool2d(self.activation(self.conv1(X)))\n",
+    "        preds = self.max_pool2d(self.activation(self.conv2bn(self.conv2(preds))))\n",
+    "        preds = self.max_pool2d(self.activation(self.conv3(preds)))\n",
+    "        preds = preds.view(-1,21*5*5)\n",
+    "        preds = self.activation(self.linear1(preds))\n",
+    "        preds = self.activation(self.linear2bn(self.linear2(preds)))\n",
+    "        preds = self.activation(self.linear3(preds))\n",
+    "        preds = self.output(preds)\n",
+    "        return preds"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "796ef632-071c-48be-b83a-6aefb302ea0f",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "model = Model().to(device)\n",
+    "criterion = MSELoss()\n",
+    "optimizer = Adam(model.parameters(),lr=0.001)\n",
+    "epochs = 100\n",
+    "bathc_size = 32"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "0ae17d2a-b04e-449b-baa4-c2119e45952a",
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "wandb.init(project=PROJECT_NAME,name='baseline-CNN')\n",
+    "for _ in tqdm(range(epochs)):\n",
+    "    for i in range(0,len(X_train),batch_size):\n",
+    "        X_batch = X_train[i:i+batch_size]\n",
+    "        y_batch = y_train[i:i+batch_size]\n",
+    "        model.to(device)\n",
+    "        preds = model(X_batch)\n",
+    "        loss = criterion(preds,y_batch)\n",
+    "        optimizer.zero_grad()\n",
+    "        loss.backward()\n",
+    "        optimizer.step()\n",
+    "    model.eval()\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Loss':(get_loss(model,X_train,y_train,criterion)+get_loss(model,X_batch,y_batch,criterion))/2})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Val Loss':get_loss(model,X_test,y_test,criterion)})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Acc':(get_accuracy(model,X_train,y_train)+get_accuracy(model,X_batch,y_batch))/2})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    wandb.log({'Val ACC':get_accuracy(model,X_test,y_test)})\n",
+    "    torch.cuda.empty_cache()\n",
+    "    model.train()\n",
+    "wandb.finish()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "id": "3706d46d-4ef8-4000-823e-05ce8220689f",
+   "metadata": {},
+   "outputs": [],
    "source": []
   }
  ],
